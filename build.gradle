/*
 * sChat, a Supercharged Minecraft Chat Plugin
 * Copyright (C) Silthus <https://www.github.com/silthus>
 * Copyright (C) sChat team and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id 'kr.entree.spigradle' version '2.2.4'
    id 'io.freefair.lombok' version '6.3.0'
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'java'
    id 'jacoco'
    id 'idea'
}

apply from: "$rootDir/gradle/jacoco.gradle"
apply from: "$rootDir/gradle/publish.gradle"

if (project.hasProperty("local_script")) {
    apply from: file(local_script + "/build.local.gradle")
}

sourceCompatibility = 16
targetCompatibility = 16

ext {
    mcVersion = project.property("mcVersion")
}

group project.property("group")

spigot {
    name = project.property("pluginName")
    authors = [project.property("author")]
    apiVersion = project.property("apiVersion")
    load = STARTUP
    depends = ['ProtocolLib']
    softDepends = ['Vault']
    permissions {
        'schat.player' {
            description 'Contains all basic player permissions for using sChat.'
            defaults 'true'
            children = [
                    'schat.player.channel': true,
                    'schat.player.channel.join': true,
                    'schat.player.channel.quickmessage': true,
                    'schat.player.directmessage': true
            ]
        }
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += ["-parameters"]
    options.fork = true
    options.forkOptions.executable = 'javac'
}

archivesBaseName = project.property("pluginName")

repositories {
    mavenLocal()
    mavenCentral()
    spigot()
    maven { url = 'https://repo.aikar.co/content/groups/aikar/' }
    maven { url = 'https://repo.dmulloy2.net/repository/public/' }
    maven { url = 'https://jitpack.io' }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {
    implementation "io.papermc.paper:paper-api:${mcVersion}-R0.1-SNAPSHOT"

    implementation "co.aikar:acf-paper:0.5.0-SNAPSHOT"
    implementation "com.github.MilkBowl:VaultAPI:1.7.1"
    implementation 'com.comphenix.protocol:ProtocolLib:4.7.0'

    implementation 'net.kyori:adventure-text-minimessage:4.2.0-SNAPSHOT'

    implementation 'org.bstats:bstats-bukkit:2.2.1'
    implementation 'net.silthus.config-mapper:bukkit:1.6.1'

    //Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation 'org.mockito:mockito-core:4.0.0'
    testImplementation 'net.silthus:MockBukkit:v1.17-SNAPSHOT'
//    testImplementation 'com.github.seeseemelk:MockBukkit-v1.17:1.10.3'
    testImplementation 'org.assertj:assertj-core:3.21.0'
}

shadowJar {
    classifier = ''
    dependencies {
        include(dependency('co.aikar::'))
        include(dependency('net.kyori::'))
        include(dependency('org.bstats::'))
        include(dependency('net.silthus.config-mapper::'))
    }
    relocate 'co.aikar.commands', "${packageName}.acf"
    relocate 'co.aikar.locales', "${packageName}.locales"
    relocate 'net.kyori.adventure.text.minimessage', "${packageName}.text.minimessage"
    relocate 'org.bstats', "${packageName}.bstats"
    relocate 'net.silthus.configmapper', "${packageName}.configmapper"
}

tasks.build.dependsOn(shadowJar)
tasks.publish.dependsOn(shadowJar)
tasks.prepareSpigotPlugins.dependsOn(shadowJar)

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    ignoreFailures = false
}

processResources {
    project.properties.put("version", this.version)
    expand project.properties
}

license {
    header = project.file('HEADER.txt')
    include '**/*.java'
}

defaultTasks 'build'
